"use strict";var __decorate=void 0&&(void 0).__decorate||function(decorators,target,key,desc){var c=arguments.length,r=c<3?target:desc===null?desc=Object.getOwnPropertyDescriptor(target,key):desc,d;if(typeof Reflect==="object"&&typeof Reflect.decorate==="function")r=Reflect.decorate(decorators,target,key,desc);else for(var i=decorators.length-1;i>=0;i--)if(d=decorators[i])r=(c<3?d(r):c>3?d(target,key,r):d(target,key))||r;return c>3&&r&&Object.defineProperty(target,key,r),r};Object.defineProperty(exports,"__esModule",{value:true});const awilix_koa_1=require("awilix-koa");const prisma_1=require("../libs/prisma");let IndexController=class IndexController{async actionList(ctx){ctx.body={message:"Hello, this is the IndexController actionList method!"}}async actionTest(ctx){const data=await prisma_1.prisma.person.findMany();ctx.body={data}}async actionSetData(ctx){const data=await prisma_1.prisma.person.create({data:{username:`testUser-${Date.now()}`,password:"testPassword",email:"123@qq.com"}});ctx.body={message:"Data has been set successfully!",data}}};__decorate([(0,awilix_koa_1.GET)()],IndexController.prototype,"actionList",null);__decorate([(0,awilix_koa_1.route)("/list"),(0,awilix_koa_1.GET)()],IndexController.prototype,"actionTest",null);__decorate([(0,awilix_koa_1.route)("/setData"),(0,awilix_koa_1.GET)()],IndexController.prototype,"actionSetData",null);IndexController=__decorate([(0,awilix_koa_1.route)("/dev")],IndexController);exports.default=IndexController;